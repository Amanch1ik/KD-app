# Generated by Django 5.2.3 on 2025-09-08 14:02

import delivery.models
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('is_active', models.BooleanField(db_index=True, default=True)),
            ],
            options={
                'verbose_name': 'Category',
                'verbose_name_plural': 'Categories',
            },
        ),
        migrations.CreateModel(
            name='DeliveryZone',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('delivery_fee', models.DecimalField(decimal_places=2, default=0.0, max_digits=6)),
                ('estimated_time', models.IntegerField(default=30, help_text='Время доставки в минутах')),
                ('is_active', models.BooleanField(default=True)),
                ('avg_rating', models.DecimalField(decimal_places=2, default=0, max_digits=3)),
            ],
        ),
        migrations.CreateModel(
            name='PromoCode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(help_text='Промокод (например, NEWYEAR2024)', max_length=50, unique=True)),
                ('discount_type', models.CharField(choices=[('percentage', 'Процентная скидка'), ('fixed_amount', 'Фиксированная сумма'), ('free_delivery', 'Бесплатная доставка')], default='fixed_amount', max_length=20)),
                ('discount_value', models.DecimalField(decimal_places=2, help_text='Значение скидки (например, 10 для 10% или 150 для 150 ед.)', max_digits=5)),
                ('start_date', models.DateTimeField(help_text='Дата начала действия промокода')),
                ('end_date', models.DateTimeField(help_text='Дата окончания действия промокода')),
                ('min_order_amount', models.DecimalField(decimal_places=2, default=0.0, help_text='Минимальная сумма заказа для применения промокода', max_digits=10)),
                ('is_active', models.BooleanField(default=True, help_text='Активен ли промокод')),
                ('usage_limit', models.PositiveIntegerField(blank=True, help_text='Максимальное количество использований промокода', null=True)),
                ('times_used', models.PositiveIntegerField(default=0, help_text='Сколько раз промокод был использован')),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('date_of_birth', models.DateField(blank=True, null=True, verbose_name='date of birth')),
                ('preferred_language', models.CharField(choices=[('ru', 'Russian'), ('ky', 'Kyrgyz'), ('en', 'English')], default='ru', max_length=10, verbose_name='preferred language')),
                ('notification_settings', models.JSONField(blank=True, default=dict, verbose_name='notification settings')),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='profile_pictures/', verbose_name='profile picture')),
                ('order_preferences', models.JSONField(blank=True, default=dict, verbose_name='order preferences')),
                ('address_book', models.JSONField(blank=True, default=list, verbose_name='address book')),
                ('payment_methods', models.JSONField(blank=True, default=list, verbose_name='payment methods')),
                ('social_links', models.JSONField(blank=True, default=dict, verbose_name='social media links')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to.', related_name='custom_user_set', related_query_name='custom_user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='custom_user_set', related_query_name='custom_user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='DeliveryPerson',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phone_number', models.CharField(blank=True, max_length=20, null=True)),
                ('vehicle_type', models.CharField(choices=[('bicycle', 'Велосипед'), ('motorcycle', 'Мотоцикл'), ('car', 'Автомобиль'), ('foot', 'Пешком')], max_length=50)),
                ('current_latitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True)),
                ('current_longitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True)),
                ('status', models.CharField(choices=[('available', 'Доступен'), ('busy', 'Занят'), ('offline', 'Не в сети')], default='offline', max_length=20)),
                ('last_location_update', models.DateTimeField(auto_now=True)),
                ('is_available', models.BooleanField(default=True)),
                ('avg_rating', models.DecimalField(decimal_places=2, default=0, max_digits=3)),
                ('document_type', models.CharField(blank=True, help_text='Тип документа (паспорт, права и т.д.)', max_length=50, null=True)),
                ('document_number', models.CharField(blank=True, help_text='Номер документа', max_length=100, null=True)),
                ('document_front_image', models.ImageField(blank=True, help_text='Изображение лицевой стороны документа', null=True, upload_to='documents/front/')),
                ('document_back_image', models.ImageField(blank=True, help_text='Изображение обратной стороны документа', null=True, upload_to='documents/back/')),
                ('is_documents_verified', models.BooleanField(default=False, help_text='Статус верификации документов')),
                ('document_submission_date', models.DateTimeField(auto_now_add=True, help_text='Дата подачи документов', null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='DeviceToken',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('registration_id', models.CharField(help_text='Токен устройства для push-уведомлений', max_length=255, unique=True)),
                ('device_type', models.CharField(choices=[('android', 'Android'), ('ios', 'iOS'), ('web', 'Web')], max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='device_tokens', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('confirmed', 'Confirmed'), ('preparing', 'Preparing'), ('out_for_delivery', 'Out for Delivery'), ('delivered', 'Delivered'), ('cancelled', 'Cancelled')], db_index=True, default='pending', max_length=20)),
                ('payment_method', models.CharField(choices=[('cash', 'Cash'), ('card', 'Card'), ('online', 'Online Payment')], db_index=True, max_length=20)),
                ('delivery_address', models.TextField()),
                ('phone_number', models.CharField(max_length=15, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'.", regex='^\\+?1?\\d{9,15}$')])),
                ('total_amount', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('courier_fee', models.DecimalField(decimal_places=2, default=0, max_digits=6)),
                ('service_fee', models.DecimalField(decimal_places=2, default=0, max_digits=6)),
                ('actual_delivery_time', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='orders', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Order',
                'verbose_name_plural': 'Orders',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='DeliveryTracking',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('latitude', models.DecimalField(decimal_places=6, max_digits=9)),
                ('longitude', models.DecimalField(decimal_places=6, max_digits=9)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('status', models.CharField(max_length=50)),
                ('estimated_arrival', models.DateTimeField(blank=True, null=True)),
                ('delivery_person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='delivery.deliveryperson')),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='delivery.order')),
            ],
            options={
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('payment_method', models.CharField(max_length=50)),
                ('transaction_id', models.CharField(blank=True, max_length=255, null=True, unique=True)),
                ('status', models.CharField(choices=[('pending', 'Ожидает'), ('completed', 'Завершена'), ('failed', 'Неуспешна'), ('refunded', 'Возвращена')], default='pending', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('order', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='payment', to='delivery.order')),
            ],
        ),
        migrations.CreateModel(
            name='Payout',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processed', 'Processed'), ('failed', 'Failed')], default='pending', max_length=20)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('transaction_details', models.TextField(blank=True, null=True)),
                ('delivery_person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payouts', to='delivery.deliveryperson')),
            ],
            options={
                'verbose_name': 'Payout',
                'verbose_name_plural': 'Payouts',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True, null=True)),
                ('price', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('is_available', models.BooleanField(db_index=True, default=True)),
                ('category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='products', to='delivery.category')),
            ],
            options={
                'verbose_name': 'Product',
                'verbose_name_plural': 'Products',
            },
        ),
        migrations.CreateModel(
            name='OrderItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(default=1)),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='delivery.order')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='delivery.product')),
            ],
        ),
        migrations.CreateModel(
            name='Restaurant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True, null=True)),
                ('is_active', models.BooleanField(db_index=True, default=True)),
                ('avg_rating', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(5.0)])),
                ('latitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True)),
                ('longitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True)),
                ('partner_user', models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='restaurant_partner', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Restaurant',
                'verbose_name_plural': 'Restaurants',
            },
        ),
        migrations.CreateModel(
            name='Rating',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('comment', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('courier', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ratings', to='delivery.deliveryperson')),
                ('order', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='delivery.order')),
                ('restaurant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ratings', to='delivery.restaurant')),
            ],
        ),
        migrations.AddField(
            model_name='product',
            name='restaurant',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='products', to='delivery.restaurant'),
        ),
        migrations.AddField(
            model_name='order',
            name='restaurant',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='orders', to='delivery.restaurant'),
        ),
        migrations.CreateModel(
            name='PasswordResetToken',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.CharField(db_index=True, max_length=128, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField()),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='password_reset_tokens', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Password Reset Token',
                'verbose_name_plural': 'Password Reset Tokens',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['user', 'token', 'expires_at'], name='delivery_pa_user_id_4a2ec7_idx')],
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('client', 'Клиент'), ('courier', 'Курьер'), ('admin', 'Администратор'), ('restaurant_partner', 'Партнёр-ресторан')], default='client', max_length=20)),
                ('email', models.EmailField(blank=True, max_length=254, null=True, unique=True, validators=[django.core.validators.EmailValidator()])),
                ('date_of_birth', models.DateField(blank=True, null=True, validators=[delivery.models.UserProfile.validate_date_of_birth])),
                ('preferred_language', models.CharField(choices=[('ru', 'Русский'), ('ky', 'Кыргызский'), ('en', 'Английский')], default='ru', max_length=10)),
                ('notification_settings', models.JSONField(blank=True, default=list, null=True)),
                ('phone_number', models.CharField(blank=True, max_length=20, null=True, validators=[django.core.validators.RegexValidator(message='Номер телефона должен быть в международном формате, например +996555123456', regex='^\\+?1?\\d{9,15}$')])),
                ('address', models.TextField(blank=True, null=True)),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='profile_pictures/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'jpeg', 'png', 'gif'], message='Разрешены только изображения в форматах jpg, jpeg, png, gif')])),
                ('social_links', models.JSONField(blank=True, default=list, null=True, validators=[delivery.models.UserProfile.validate_social_links])),
                ('payment_methods', models.JSONField(blank=True, default=list, null=True)),
                ('order_preferences', models.JSONField(blank=True, default=dict, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Профиль пользователя',
                'verbose_name_plural': 'Профили пользователей',
                'unique_together': {('user', 'email')},
            },
        ),
    ]
