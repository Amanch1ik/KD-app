name: Django CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.9, 3.10, 3.11]

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_DB: github_actions
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:6
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run Migrations
      env:
        DEBUG: True
        SECRET_KEY: test_secret_key
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/github_actions
        CHANNEL_LAYER: redis
        REDIS_URL: redis://localhost:6379/0
      run: |
        python manage.py migrate
    
    - name: Run Tests
      env:
        DEBUG: True
        SECRET_KEY: test_secret_key
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/github_actions
        CHANNEL_LAYER: redis
        REDIS_URL: redis://localhost:6379/0
      run: |
        python manage.py test
    
    - name: Run Linters
      run: |
        pip install flake8
        flake8 .

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Run Bandit
      run: |
        pip install bandit
        bandit -r . -f custom

  deploy:
    needs: [test, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Deploy to Production
      env:
        DEPLOY_KEY: ${{ secrets.SERVER_SSH_KEY }}
      run: |
        echo "Deployment logic here"
        # Add your deployment script (e.g., SSH, Docker, Heroku, etc.)

  notify:
    needs: [test, security-scan, deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Send Slack Notification
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
